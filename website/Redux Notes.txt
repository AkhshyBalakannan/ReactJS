Redux Notes 

Provider
    import { Provider } from 'react-redux';

    Basic Concept here is its the initial stage where redux concept starts
        To learn Redux we must have already gone thru react concepts so we would be aware of props
        where the sent props to sub-component is accessible to get or modify value

    So Provider is the parent component which should wrap the entire App component in order for redux to work

    import { Provider } from 'react-redux';

    Commonly done in index.js file
        <Provider store={store}>
            <App />
        </Provider>


initialState
    Basic concept is State is an object where we can have key value pairs of any data-type

    const initialState = {
        value: 0,
        status: 'idle',
    };

    Commonly this initialState will be used in place where the createSlice is called

    export const counterSlice = createSlice({
        name: 'counter',
        initialState,
        // The `reducers` field lets us define reducers and generate associated actions
        reducers: {
            increment: (state) => {
                state.value += 1;
            }
        }
    });

    The above code snippet is the complete example of how redux has to be set

    To use these state values, reducers inside our component we need to import them,
        For init state value we need useSelector function from 'react-redux'
        which is similar to useState, used for getting values from state

    useSelector
        import { useSelector } from 'react-redux';
        import { increment, selectCount } from './counterSlice';

        const count = useSelector(selectCount);

Reducers 
    Basic concept here is we have imported the state variable to render in our component
        But how will we mutate it to update the value we want it to be ?

    Here comes the useDispatch function which we need from 'react-redux' itself

    Basically redux would take all the reducer functions and will have it in separate place
        where its main goal is to update the state variables based on some user actions or API

useDispatch 
    As already said useDispatch is to alter the state variables, when we want to alter the state 
        we call the reducer functions to do it, but how will we have access to reducer function
        we will use this dispatch hook which will trigger the reducer function and update the state 

    import { useDispatch } from 'react-redux';
    import { increment, selectCount } from './counterSlice';

    const count = useSelector(selectCount);
    const dispatch = useDispatch();   

    return (
    <div>
        <p>{ count }</p>
        <button
          className={styles.button}
          aria-label="increment value"
          onClick={() => dispatch(increment())}
        >
    </div>
    )
    
createAsyncThunk
    Basic concept, here is we now know how to create, access and update state using 
        useSelector, useDispatch methods from 'react-redux'

    We should be able to call APIs in order to update the state variables say as user login
        where we need to wait for some time for backend to response and need to save user 
        data in our state to access it anytime

    For this we have method provided by reduxjs itself called as createAsyncThunk

    The function below is called a thunk and allows us to perform async logic. It
        can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
        will call the thunk with the `dispatch` function as the first argument. Async
        code can then be executed and other actions can be dispatched. Thunks are
        typically used to make async requests.

    import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
    import { fetchCount } from './counterAPI';

    export const incrementAsync = createAsyncThunk(
        'counter/fetchCount',
        async (amount) => {
            const response = await fetchCount(amount);
            // The value we return becomes the `fulfilled` action payload
            return response.data;
        }
    );

extraReducers
  Basic concept here is
    The `extraReducers` field lets the slice handle actions defined elsewhere,
    including actions generated by createAsyncThunk or in other slices.

  Example we can create an action which has to happen once after the 
    createAsyncThunk reducer is in in-progress or completed status

    you will see .addCase which is similar to switch statement, which we can
    chained as many times you want to for as many async functions

  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
    },
  });

store.js 
    Basic concept here is its one time declarations, where we need to tell react
        what all stores we have configured in our app and where to look those reducers 
        Its done using the configureStore methods from reduxjs 

    import { configureStore } from '@reduxjs/toolkit';
    import counterReducer from '../features/counter/counterSlice';

    export const store = configureStore({
    reducer: {
        counter: counterReducer,
        },
    });

For real examples check Branch https://github.com/AkhshyBalakannan/ReactJS/tree/Ref-Redux-Counter
